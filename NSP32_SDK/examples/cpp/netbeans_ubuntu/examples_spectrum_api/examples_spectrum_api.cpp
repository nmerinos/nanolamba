// examples_spectrum_api.cpp : Defines the entry point for the console application.
// This console application is to show how programmer can create, use, and destroy of device object.
//
// (c) nanolamda 2012~2017

#include <stdio.h>
#include <stdlib.h>

#include "nsp_core_common.h"
#include "nsp_core_api.h"

/*
	Example: NSP32 spectrum reconstruction API

	This example shows how user can use API to get spectrum data.
*/

char* g_str_sensor_id = "sensor_Y8585-1-14-21-0";								// put your sensor ID
char* g_sensor_cal_file_path = "./config/sensor_Y8585-1-14-21-0.dat";	// modify with your sensor ID

// raw background and filter data for Fluorescent lamp (acquisition conditions: ADC gain=1, ADC range=246, shutter speed=150, frame average=20)
double raw_filter_data[SENSOR_DATA_SIZE] = {193.32,193.32,169.22,164.88,172.12,166.76,162.32,164.64,160.66,180.6,174.4,169.84,171.32,169.44,174.82,181.54,168.56,182.7,171.82,187.7,172.16,
		176.88,172.7,166.4,173.92,178.5,172.66,174.78,181.32,180.66,202.04,2764.46,103.46,163.9,163.74,148.54,159.58,157.72,143.86,143.84,153.28,169.74,163.4,147.96,151.88,174.6,147.66,158.2,
		155.02,161.52,149.3,162.52,162.3,159.68,153.9,176.92,163.26,165.2,166.64,162.7,163.98,165.12,176.48,245.44,75.86,173.04,169.42,164.8,165.54,156.98,156.34,158.02,174.92,177.08,169.26,
		169.86,168.36,165.62,181.92,167.58,164.52,168.02,173,176.22,161.16,167.92,177.68,163.12,181.7,175.96,168.42,182.84,174.82,167.94,180.82,222.48,102.8,565.78,933.18,2741.92,855.98,865.52,
		870.06,897.26,901.7,914.7,920.82,916.64,930.82,899.34,899.72,886.92,876.7,898.7,900.56,913.36,913.6,912.58,872.28,838.74,848.82,856.66,838.76,822.76,2823.16,983.98,586.26,236.26,102.28,
		600.08,987.62,819.8,1916.1,757.54,758.02,748.48,747.5,1147.06,872.3,811.16,829.86,824.44,808.28,1047.02,1047.02,1051.92,1045.1,1065.66,1278.98,1236.1,1173,1121.36,1082.64,1241.06,1225.18,
		1978.92,839.6,980.38,642.34,247,103.42,829.74,980.78,806.98,1186.86,689.18,689.88,999.88,1019.68,1103.84,888.66,900.96,883.9,1220.56,1211.5,1159.7,1133.58,1147.64,1151.32,1603.98,1448.68,
		1464.42,1419.86,1451.7,1404.5,1844,1832.68,1404.76,819.64,998.16,883.24,263.76,85.84,822.78,983,780.12,1111.66,1830.84,770.52,764.62,771,775.18,217.16,200.22,193.94,190.7,200.02,205.2,225.1,
		215.22,206.24,207.58,220.8,224.5,314.2,302.28,314.72,335.32,1875.88,1262.2,813.3,1012.88,912.38,249.34,97,824.38,973.18,767.72,1166.38,1779.98,309.6,2930.92,871,865.88,889.74,849.7,857.22,
		838.32,834.42,815.7,804.38,787.86,795.44,799.46,832.38,832.7,823.52,804.9,2993.26,325.4,1838.82,1236.94,793.72,1001.64,872.36,282.66,96.74,1008.98,1070.04,744.22,1095.42,1597.84,278.06,801.74,
		1358.8,1355.72,1367.38,1332.22,1337.72,1313.18,1273.3,1249.4,1211.96,1187.68,1279.2,1254.02,1274.96,1228.84,1222.9,1176.24,797.78,278.02,2137.62,1184.94,779.4,1122.84,1097.18,287.3,106.34,913.8,
		1014.02,706.58,1032.48,1861.58,357.56,783.8,1187.82,1327.02,1278.98,1370.42,1406.22,1355.86,1395.98,1374.32,1336.76,1322.04,1312.12,1325.54,1244.06,1211.98,1254.58,1140.6,767.34,345.6,1918.54,
		1113.08,773.06,1126.86,934.3,300.54,105.24,887.78,992.34,699.66,1079.3,1804.2,337.76,788.82,1161.6,1329.6,961.22,933.32,923.94,917.46,942.28,926.7,892.36,877.92,850.96,853.66,791.7,784.76,1243.04,
		1119.58,794.18,328.66,1847.58,1141.14,743.52,1122.2,903.12,284.48,97.22,1235.26,1005.82,672.96,1068.78,1725.68,301.92,787.66,1116.68,1318.08,849.36,1009.66,994.3,986,1223.34,1202.94,1164.8,1147.78,
		1086.88,1096.72,995.88,816.54,1397.3,1105.78,778.8,335.32,2081.96,1125.18,750.82,1128.34,1235.84,299.22,107.68,1211.52,1005.46,750.48,1028.42,1957.76,304.86,770.22,1152.68,1474.42,872.64,1220.82,
		470.22,667.48,657,649.46,648.72,621.4,587.04,593.6,1133.16,840.04,1424.22,1103.58,785.92,425.46,2043.22,1100.26,810.92,1116.4,1245.74,304.62,108.22,1213.12,1148.96,751.38,1078.56,1905.4,443.12,763.32,
		1122.22,1464.14,986.04,1225.16,844,269.5,285.18,270.48,286.9,280.92,277.84,806.4,1122.12,944.02,1446.82,1112.48,764.16,493.06,1988.02,1139.1,792.32,1225.04,1275.96,278.7,111.18,1208.14,1166.26,762.94,
		1056.32,1883.6,471.82,751.42,1089.02,1491.06,994.44,1208.8,881.3,414.78,204,204.42,194.6,227.56,431.26,838.5,1113.5,983.34,1491.22,1094.48,784.76,518.7,2184.02,1084.8,811.34,1227.22,1623.66,271.46,114.94,
		1525.9,208.52,744.08,1021.9,2080.98,470.82,749.96,1053.54,1510.98,1053.02,1200.26,929.1,472.12,283.96,2819.62,235.32,255.16,471.42,879.78,1076.86,1013.24,1522.96,1082.32,770.02,537.8,2133.78,1042.6,783.18,
		207.36,1629.64,263.08,2715.54,1495.36,196.66,755.46,967.56,2027.46,494.98,771.84,1044.26,1521.02,1047.14,1255.74,944.1,471.2,257.48,226.82,3826.16,257.14,468.18,855.2,1162.34,993.94,1527.56,1069.42,805.6,
		781.54,2072.62,1006.22,793.24,210.24,1592.76,2970.28,120.4,1379.14,199.88,729.64,969.64,1928.1,676.18,766.78,1036.3,1493.52,1011.02,1185.56,1246.2,464.68,268.36,275.32,402.32,401.56,721.8,1138.3,1114.06,
		976.76,1507.24,1072.16,801.04,744.82,2128.14,981.76,763.36,232.22,1686.9,266.14,102.74,1475.2,211.3,729.68,931,1973.78,642.14,751.12,1015.02,1446.18,943.8,1090.6,1170.4,654.56,644.42,638.84,637.3,612.82,
		577.86,1058.16,1036.8,963.9,1460.5,1030.3,790.2,705.06,2018.68,958.22,764.06,228.44,1553.42,248,108.4,1268.2,215.48,699.62,890.82,191.74,537.3,764.38,1021.22,1557.28,896.66,967.02,931.56,934.54,922.36,
		1220.9,1233.74,1217.96,1225.98,1217.78,999.48,884.06,1525.18,992.54,782.44,563.18,207.1,939.9,845.52,216.48,1338.06,253.46,122.84,1179.56,192.78,755.54,923.74,187.4,712.02,746.66,973.28,1508.12,877.98,
		1003.22,1011.18,1029.56,995.82,992.44,988.48,989.98,1035.58,1018.08,931.24,957.8,1424.9,968.58,767.72,718.36,191.14,987.36,828.2,221.84,1420.16,258.62,99.12,1282.32,218.86,767.02,908.72,190.18,669.6,780.02,
		972.5,1429.18,959.34,969.02,1011.88,1032.88,1074.5,1087.18,1131.18,1164.3,1215.7,1264.44,1237.18,1254.74,1389.9,949.8,793.5,693.08,210.02,960.98,848.94,278.9,1352.76,257.12,116.64,1255.2,236.06,775.4,886.12,
		199.16,650.88,758.58,974.32,1396.28,1396.02,1384,1415.2,1420.26,1426.08,1404.3,1382.28,1377.48,1521.84,1519.4,1452.9,1398.48,1327.94,948.38,770.08,667.66,212.52,929.8,854.94,274.8,1330.54,264.5,95.5,1213.8,
		236.88,793.78,866.94,201.36,644.24,761.32,938.02,956.12,968.38,964.18,967.52,968.64,964.86,955.82,961.44,964,961.5,961.2,949.06,876.62,863.32,835.3,786.66,648.82,192.8,916.08,868.18,276.48,1397.46,268.22,99.74,
		1285.66,327.2,799.94,829.64,204.24,919.5,2935.34,770.06,786.84,796.14,785.28,815.98,810.82,809.18,822.16,820.06,812.88,812.84,817.22,820.18,792.24,788.68,767.52,2987.92,934.62,227.82,842.48,848.62,393.9,1356.66,
		279.86,96.86,211.68,324.3,786.54,794.32,267.26,929.74,911.96,912.06,912.9,879.38,1182.6,1215.44,1270.08,500.08,754.56,714.48,676.7,670.1,698.78,607.62,868.38,822.54,783.32,755.68,705.42,291.72,827.12,868.2,410.1,
		320.44,275.96,106.36,282.7,344.32,807.26,799.64,278.04,264.02,259.92,268.26,408.08,356,377.28,398.22,423.86,458.98,661.86,630.58,600.58,592.42,603.56,760.4,737.72,692.48,667.74,626.42,619.42,810.04,877.94,845.9,
		405.54,307.22,262.18,108.62,291.3,463.3,884.26,1945.12,856.98,869.24,908.48,930.18,988.22,1007.5,1054.08,1069.38,1067.22,1095.14,1077.52,1051.74,1052.42,1012.66,1009.78,1012.2,992,957.04,931.18,922.9,917.18,912.44,
		2006.48,942.74,567.94,309.34,244.58,99.52,258.82,446.3,2731.1,877.4,863.6,864.26,864.62,879.8,900.38,893.92,891.5,907.88,902.12,926.26,927.26,932.14,1008.7,996.56,984.22,1008.66,996.26,971.6,958.46,948.64,949.88,
		919.34,928.02,2841.68,553.84,413.3,258.3,102.96,285.68,360.84,479.26,476.12,499.44,489.14,503.82,536.72,750.1,567.82,580.84,590.02,618.94,299.32,506.28,477.78,500.86,515.74,577.38,386.84,577.26,573.04,551.56,524.28,
		514.16,499.74,548.52,862.42,902.94,318.26,253.26,103.86,198.7,280.26,281.54,277.6,281.16,418.84,427.48,459.8,501.98,374.16,378.68,389.22,556.76,596.46,634.38,676.24,655.98,652.84,950.68,719.86,740.7,712.44,681.9,659,
		650.6,888.68,941.46,995.34,932.4,197.52,263.28,2546.42,208.6,199.22,201.86,205.34,196.46,204.24,198.46,190.6,225.96,204.82,193.98,224.4,213.08,214.44,203.8,2854.38,240.22,238.48,223.92,238.94,236.08,259.3,252.62,278.7,
		283.72,305.9,2835.56,2840.24,314.72,307.74,2886.78};

double background_filter_data[SENSOR_DATA_SIZE] = {139.04,139.04,136.06,127.84,136.02,133.5,122.9,130.4,129.22,145.28,132.36,131.34,136.16,134.12,138.94,133.12,135.3,134.68,135.1,136.42,134.02,136.76,128.2,131.9,134.28,134.36,
		126.34,129.66,135.72,132.16,136.24,143.02,44.98,122.3,135.32,120.46,127.42,127.34,115.32,113.24,123.36,137.24,129.58,118.46,124.72,131.34,119.48,127.62,125.44,122.78,116.96,126.22,126.38,126.9,119.42,123.28,130.06,129.16,
		128.02,120.74,119.74,124.44,114.8,130,36.46,130.6,125.18,122.24,129.64,117.66,113.92,120.98,126.48,127.06,130,125.62,119.42,124.62,133.38,119.42,118.46,123.84,123.48,129.38,122.22,125.86,127.62,117.54,132.44,135.56,121.06,
		124.84,127.98,125.74,129.02,134.02,37.64,133.24,129.3,135.18,122.24,125,114.48,117.52,123.14,134.76,123.96,125.12,123.34,119.82,121.76,119.62,110.56,123.6,121.22,125.24,119.64,126.92,114.78,114.12,125.96,130.02,118.02,113.14,
		135.56,115.9,121.04,128.16,46.64,129.66,129.68,121.7,127.4,127.46,115.66,123.14,128.12,133.14,131.44,123.06,124.34,127.66,125.06,121.62,121.7,124.84,120.52,117.94,126.68,128.26,129.34,124.02,118.4,132.44,115.94,131.14,128.76,
		121.98,139.86,132.44,37.12,122.96,124.7,120.62,123.72,120.9,116.4,113.74,120.96,128.8,125.44,132.02,116.16,126.88,121.96,131.22,117.16,119.72,122.24,129.44,122.56,132.5,131.62,129.2,130.08,130.04,125.04,122.06,132.54,121.12,
		122.3,133.74,35.76,132.3,129.14,107.98,120.44,125.94,118.06,116.86,118.48,129.02,123.3,119.62,122.12,123.52,119.68,117.52,123.14,127.04,117.52,113,120.28,121.34,126.12,112.28,121.9,128.26,125.18,122.36,125.88,120.3,128.96,123.72,
		38.04,138.34,123.5,113.86,127.94,132.34,123.36,131.22,127.02,132.9,127.16,118.38,121.68,119.7,125.64,124.8,120.72,122.56,125.54,125.6,119.72,129.88,128.8,117.86,140.38,128.6,121.9,130.4,120.96,127.2,127.34,130.6,34.1,122.48,133.06,
		120.32,118.26,132.1,115.36,127.4,130.56,128,129.4,129.42,128.66,127.54,119.4,126.4,119.26,129.46,130.44,125.2,126.8,129.06,128.8,125.18,124.18,120.4,122.44,124.8,130.84,128.8,122.8,131.9,38.12,130.7,124.2,119.64,115.06,124.84,
		113.16,119.22,130.26,129.24,128.1,117.98,128.22,118.74,126.5,121.66,127.36,120.56,122.54,129.72,125.8,123.66,134.72,131.3,121.18,127.06,121.44,130.76,126.44,127.94,135.58,133.18,44.36,129.4,127.48,124.6,127.08,131.24,114.76,121.46,
		121.74,131.28,133.46,125.84,127.48,130.92,119.36,122.18,116.1,122.66,120.14,132.7,123.72,119.64,125.76,116.74,133.64,125.88,122.64,121.5,128.86,131.5,123.88,125.88,38.64,134.42,129.92,111.26,132.56,121.5,112.32,123.24,120.86,124.44,
		128.22,115.74,122.1,117.9,123.18,125.52,120.72,128.3,121.52,127.14,128.92,128.02,131.12,122.62,117.04,127.32,123.3,121,121.18,118.06,124.9,131.56,39.66,129.84,127.74,117.7,123.44,133.14,111.76,117.98,130.6,131.88,134.14,129.7,
		126.12,131.42,119.18,119.06,111.7,130.3,115.72,120.86,124.74,130.48,131.48,119.18,126.56,128.8,127.28,121.34,123.34,125.46,125.36,133.22,40.9,133.14,134.3,119.16,117.6,122.96,110.66,114.24,125.04,133.32,124.94,128.86,121.52,119.64,
		119.82,116.48,114.96,122.54,121.78,120.68,124.54,133.18,122.16,120.34,118.92,128.9,117.22,121.62,120.8,123.88,128.94,136.66,40.64,117.86,141.58,119.52,119.44,125.92,122.3,115.18,129,139.8,121.62,129.2,120.42,124.48,124.22,114.48,
		117.14,107,119.72,121.06,120.04,123.52,118.58,119.56,124.46,134.02,123.56,119.98,124,127.12,121.86,125.28,32.8,136.94,119.86,119.44,121.14,130.86,114.14,116.8,125.98,131.16,126.42,122.32,128.18,121.02,121.6,131.58,121.64,115.82,
		127.76,131.16,119.82,126.06,129.02,118.7,115.08,121.36,126.56,132.1,120.02,120.56,129.68,125.88,54.92,128.36,122.82,117.9,112.32,133.92,118.82,116.4,123.18,133.32,128.76,120.8,135.08,118.76,121.34,117.34,137.62,121.62,118.8,123.88,
		126.96,125.86,129.66,124.84,121.38,132.54,125.4,122.36,131.12,128.24,129.04,142.82,41.9,133.56,122.94,114.8,124.26,125.18,113.46,123.4,119,129.52,129.62,121.92,128.38,128.48,129.12,126.04,120.18,116.88,125.3,122.88,136.18,129.8,
		126.26,123.1,118.84,114.82,124.2,126.78,121.02,112.28,130.48,129.26,38.32,135.98,122.18,115.82,117.24,127.16,114.92,113.14,124.66,137.36,120.4,114.1,129.18,125.58,132.9,125.38,128.32,122.66,118.66,122.88,122.34,125.44,129.58,114.7,
		116.56,131.06,135.04,112.12,122.78,119.62,122.18,128.76,42.96,128.6,124.48,113.88,123.9,112.48,114.66,111,133.08,136.78,121.44,129.38,126.84,122.28,128.96,124.28,129.48,129.8,129.8,125.94,127.46,113.54,137.48,122.52,126.48,119.18,
		111.42,121.06,119.16,115.96,132.08,135.36,40.22,125.44,123.78,114.16,122.3,118.34,120,107.36,120.78,135.62,124.3,126.46,123.22,128.14,118.66,119.74,121.18,124.48,127.08,115.3,119.14,130.86,127.18,121.14,119.44,120.36,107,128.88,
		125.48,116.7,136.3,127.66,38.94,127.9,123.18,113.76,127.38,125.84,117.7,120.46,129.4,130,127.66,125.88,126.2,122.3,126.84,124.38,122.7,124.18,129.62,127.78,117.42,131.98,126.68,114.2,122.46,117.84,119.86,123.68,124.08,124.76,121.64,
		125.74,48.44,138.44,127.8,118.58,130.98,117.28,117.78,116.92,128.34,136.14,123.84,121.12,125.2,126.12,125.58,127.44,122.74,124.74,127.74,119.38,132.76,125.36,132.38,118.88,122.78,124.74,120.38,119.82,123.48,121.96,135.12,132.54,
		35.04,135.66,135.38,122.54,119.98,119.4,110.9,120.88,127.58,134.6,130.3,125.58,118.52,123.04,127.06,125.3,119.68,123.52,119.68,130.04,122.86,116.4,122.32,119.2,132.82,119.84,109.82,127.6,127.84,121.08,128.1,131.54,39.26,135.28,
		123.02,122.26,126.34,122.14,116.64,131.9,124.18,134.96,125.54,126.6,125.48,121.9,121.42,117.24,114.32,127.54,128.26,130.7,125.38,120.22,135.46,121.6,132.3,120.94,121.98,113.46,122.56,121.12,128.72,130.02,41.34,129.16,120.76,117.32,
		123.08,124.92,117.06,116.92,132.68,130.04,126.62,122.6,133.86,120.42,131.22,125.12,119.9,113.96,119.24,125.68,131.6,126.04,113.66,113.44,123.34,122.26,115.12,117.98,128.1,123.96,122.06,130.1,39.76,127.68,128.48,120.8,119.12,132.5,
		111.32,118.14,118.66,128.26,121.16,116.98,119.5,124.16,122.18,120.12,116.58,116.46,124.46,128.6,127.72,121.72,121.6,123.16,118.02,118.84,116.72,123.48,124.36,125.06,116.52,129.7,37.7,136.22,123.26,121.56,128.82,121.6,114.28,113.2,119,135.84,
		122.26,132.82,129.58,114.48,131.66,124.34,126.76,125.96,114.6,128.74,138.58,133.58,119.86,118.52,128.5,127.1,121.9,129.28,124.88,125.34,124.78,132.04,44.36,128.4,129.28,134.86,123.1,121.84,116.54,119.82,131.64,125.72,128.78,124.1,122.08,
		122.16,127.48,126.82,126.48,126.82,118.9,119.12,127.04,129.48,126.76,120.46,122.14,130.32,119.18,119.14,134.7,113.94,122.52,127.88,48.02,134.5,131.62,115.54,124.24,129.66,115.82,121,130.28,129.3,113.3,126.74,117.22,123.18,116.36,125.76,
		112.94,125.94,111.04,126.3,122.08,121.28,130.76,128.32,122.68,124.3,103.64,118.38,126.7,119.88,123.96,126.82,38.64,126.94,128.08,119.02,124.46,115.98,110.9,114.2,129.44,135.32,129.94,119.06,125.16,124.98,125.92,117.6,123.36,129.24,119.52,
		131.14,114.62,130.06,129.6,126.12,121.9,127.86,122.22,127.42,128.62,121.02,113.58,129.92,55.06,129.58,119.12,128.84,124.4,127.84,119.68,124.44,125.46,144.38,122,113.48,128.84,122.7,122.26,118.26,131.28,127.66,132.68,118.9,116.52,124.7,
		134.42,118.94,127.24,132.72,114.16,132.12,136,126.62,127.18,144.26};

int examples_spectrum_core_api(bool dump_to_file)
{
	int			current_device_index = 0;
	int			total_num_of_sensors = 0;
	char**		sensor_list = NULL;		// sensor ID list
	int			shutter_speed = 150;	// SS for data acquisition of raw background and filter data.
	int			ret_val = 0;

	try{
		// create Core Spectrum object for spectrum calculation
		if( csCreate() != NSP_RETURN_VALUE_SUCCESS ){
			throw nsp_base_exception(cc_ec_fail_to_create_core_spectrum_obj);
		}

		// add one sensor to active sensor list
		int total_count_of_active_sensors =	csRegister(g_sensor_cal_file_path);
		if( total_count_of_active_sensors == 0 ){
			throw nsp_base_exception(cc_ec_fail_to_add_sensor_to_active_sensor_list);
		}

		// get sensor ID list from sensor calibration data container.
		char** sensor_list = csGetSensorList();

		// calculate spectrum
		double	filter_data_in[SENSOR_DATA_SIZE];
		double	*spectrum_data_out = NULL;
		double	*wavelength_data_out = NULL;

		// use a sample data as input filter data.
		memset(filter_data_in, 0, sizeof(double)*SENSOR_DATA_SIZE);
		for(int i=0;i<SENSOR_DATA_SIZE;i++)
			filter_data_in[i] = raw_filter_data[i];

		// get spectrum data size from sensor calibration data
		int		spectrum_data_size = csGetSpectrumLength();
		printf("[examples_spectrum_core_api] spectrum_data_size: %d\n", spectrum_data_size);

		// allocate memory for spectrum and wavelength data.
		spectrum_data_out = (double *)malloc(sizeof(double)*spectrum_data_size);
		if( spectrum_data_out == NULL )	throw "fail to allocate memory for spectrum data.";
		wavelength_data_out = (double *)malloc(sizeof(double)*spectrum_data_size);
		if( wavelength_data_out == NULL )	throw "fail to allocate memory for wavelength data.";

		// set background data
		csSetBackground(background_filter_data);

		// get spectrum data
		ret_val = csCalculateSpectrum(filter_data_in, shutter_speed, spectrum_data_out, wavelength_data_out);
		if( ret_val == spectrum_data_size ){

			for(int i=0;i<spectrum_data_size;i++){
				if( i != 0 && i % 3 == 0 )	printf("\n");
				printf("%4.0f(nm) - %*.2f, ", wavelength_data_out[i], 7, spectrum_data_out[i]);
			}
			printf("\n");

			// dump related information and data to CSV format file.
			if( dump_to_file == true ){
				////////////////////////////////////////////////////
				// saving spectrumdata to csv
				std::string outputFileName = "examples_spectrum_api_" + std::string(g_str_sensor_id) + "_result.csv";
				fstream filestream;
				filestream.open(outputFileName.c_str(), ofstream::out);
				if (filestream.is_open() == true) {
					filestream << "Sensor ID, " << g_str_sensor_id << endl;
					filestream << "Wavelength data" << endl;
					for (int i = 0; i < (int) spectrum_data_size; i++) {
						filestream << wavelength_data_out[i];
						if (i != (spectrum_data_size - 1))
							filestream << ",";
					}
					filestream << endl;
					filestream << "Spectrum data" << endl;
					for (int i = 0; i < (int) spectrum_data_size; i++) {
						filestream << spectrum_data_out[i];
						if (i != (spectrum_data_size - 1))
							filestream << ",";
					}
					filestream << endl;
					filestream.close();
				}
				printf("[examples_spectrum_core_api] Spectrum dump to \"%s\" -- done!\n", outputFileName.c_str());
			}
		}

		// finalize spectrum API
		csDestroy();

		if( sensor_list ){
			for(int i=0;i<total_num_of_sensors;i++){
				free((void *)sensor_list[i]);
			}
			free((void *)sensor_list);
		}

		return NSP_RETURN_VALUE_SUCCESS;
	}
	catch(nsp_base_exception &e){
		csDestroy();

		if( sensor_list ){
			for(int i=0;i<total_num_of_sensors;i++){
				free((void *)sensor_list[i]);
			}
			free((void *)sensor_list);
		}

		printf("[examples_spectrum_core_api] NSP_BASE_EXCEPTION happened: %s\n", e.what());
		return -(int)e.error_code; 
	}
	catch(...){
		csDestroy();

		if( sensor_list ){
			for(int i=0;i<total_num_of_sensors;i++){
				free((void *)sensor_list[i]);
			}
			free((void *)sensor_list);
		}

		printf("[examples_spectrum_core_api] std::exception happed !!\n");
		return NSP_RETURN_VALUE_FAILURE;
	}
}